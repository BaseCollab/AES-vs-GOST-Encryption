#include <gtest/gtest.h>

#include "chacha20/chacha20.h"

// clang-format off
namespace chacha20 {

TEST(ChaCha20Test, QuaterRound)
{
    uint32_t a = 0x11111111;
    uint32_t b = 0x01020304;
    uint32_t c = 0x9b8d6f43;
    uint32_t d = 0x01234567;

    Cipher::QuarterRound(&a, &b, &c, &d);

    ASSERT_EQ(a, 0xea2a92f4);
    ASSERT_EQ(b, 0xcb1cf8ce);
    ASSERT_EQ(c, 0x4581472e);
    ASSERT_EQ(d, 0x5881c4bb);
}

TEST(ChaCha20Test, StateInit)
{
    Key key {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
             0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f};

    Nonce nonce {0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x00};

    Cipher::State state;
    state.Init(key, 1, nonce);

    ASSERT_EQ(state.state[0],  0x61707865);
    ASSERT_EQ(state.state[1],  0x3320646e);
    ASSERT_EQ(state.state[2],  0x79622d32);
    ASSERT_EQ(state.state[3],  0x6b206574);

    ASSERT_EQ(state.state[4],  0x03020100);
    ASSERT_EQ(state.state[5],  0x07060504);
    ASSERT_EQ(state.state[6],  0x0b0a0908);
    ASSERT_EQ(state.state[7],  0x0f0e0d0c);

    ASSERT_EQ(state.state[8],  0x13121110);
    ASSERT_EQ(state.state[9],  0x17161514);
    ASSERT_EQ(state.state[10], 0x1b1a1918);
    ASSERT_EQ(state.state[11], 0x1f1e1d1c);

    ASSERT_EQ(state.state[12], 0x00000001);
    ASSERT_EQ(state.state[13], 0x09000000);
    ASSERT_EQ(state.state[14], 0x4a000000);
    ASSERT_EQ(state.state[15], 0x00000000);
}

TEST(ChaCha20Test, ProcessBlockInner)
{
    Key key {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
             0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f};

    Nonce nonce {0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x00};

    Cipher::State state;
    state.Init(key, 1, nonce);

    ASSERT_EQ(state.state[0],  0x61707865);
    ASSERT_EQ(state.state[1],  0x3320646e);
    ASSERT_EQ(state.state[2],  0x79622d32);
    ASSERT_EQ(state.state[3],  0x6b206574);

    ASSERT_EQ(state.state[4],  0x03020100);
    ASSERT_EQ(state.state[5],  0x07060504);
    ASSERT_EQ(state.state[6],  0x0b0a0908);
    ASSERT_EQ(state.state[7],  0x0f0e0d0c);

    ASSERT_EQ(state.state[8],  0x13121110);
    ASSERT_EQ(state.state[9],  0x17161514);
    ASSERT_EQ(state.state[10], 0x1b1a1918);
    ASSERT_EQ(state.state[11], 0x1f1e1d1c);

    ASSERT_EQ(state.state[12], 0x00000001);
    ASSERT_EQ(state.state[13], 0x09000000);
    ASSERT_EQ(state.state[14], 0x4a000000);
    ASSERT_EQ(state.state[15], 0x00000000);

    for (size_t i = 0; i < Cipher::BLOCK_INNER_ITERS; i++)
        Cipher::ProcessInnerBlock(&state);

    ASSERT_EQ(state.state[0],  0x837778ab);
    ASSERT_EQ(state.state[1],  0xe238d763);
    ASSERT_EQ(state.state[2],  0xa67ae21e);
    ASSERT_EQ(state.state[3],  0x5950bb2f);

    ASSERT_EQ(state.state[4],  0xc4f2d0c7);
    ASSERT_EQ(state.state[5],  0xfc62bb2f);
    ASSERT_EQ(state.state[6],  0x8fa018fc);
    ASSERT_EQ(state.state[7],  0x3f5ec7b7);

    ASSERT_EQ(state.state[8],  0x335271c2);
    ASSERT_EQ(state.state[9],  0xf29489f3);
    ASSERT_EQ(state.state[10], 0xeabda8fc);
    ASSERT_EQ(state.state[11], 0x82e46ebd);

    ASSERT_EQ(state.state[12], 0xd19c12b4);
    ASSERT_EQ(state.state[13], 0xb04e16de);
    ASSERT_EQ(state.state[14], 0x9e83d0cb);
    ASSERT_EQ(state.state[15], 0x4e3c50a2);
}

TEST(ChaCha20Test, ProcessBlock)
{
    Key key {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
             0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f};

    Nonce nonce {0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x00};

    uint8_t block[Cipher::BLOCK_SIZE] = {0x10, 0xf1, 0xe7, 0xe4, 0xd1, 0x3b, 0x59, 0x15, 0x50, 0x0f, 0xdd, 0x1f, 0xa3,
                                         0x20, 0x71, 0xc4, 0xc7, 0xd1, 0xf4, 0xc7, 0x33, 0xc0, 0x68, 0x03, 0x04, 0x22,
                                         0xaa, 0x9a, 0xc3, 0xd4, 0x6c, 0x4e, 0xd2, 0x82, 0x64, 0x46, 0x07, 0x9f, 0xaa,
                                         0x09, 0x14, 0xc2, 0xd7, 0x05, 0xd9, 0x8b, 0x02, 0xa2, 0xb5, 0x12, 0x9c, 0xd1,
                                         0xde, 0x16, 0x4e, 0xb9, 0xcb, 0xd0, 0x83, 0xe8, 0xa2, 0x50, 0x3c, 0x4e};

    Cipher::State state;
    Cipher::ProcessBlock(key, 1, nonce, &state);

    ASSERT_TRUE(memcmp(block, state.state, sizeof(block)) == 0);
}

TEST(ChaCha20Test, Encrypt)
{
    Key key {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
             0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f};

    Nonce nonce {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x00};

    char plaintext[115] =
        "Ladies and Gentlemen of the class of '99: "
        "If I could offer you only one tip for the future, sunscreen would be it.";

    size_t len = strlen(plaintext);

    uint8_t encrypted[114] = {};

    Cipher::Encrypt(key, 1, nonce, reinterpret_cast<uint8_t *>(plaintext), encrypted, len);

    uint8_t ciphertext[114] = {0x6e, 0x2e, 0x35, 0x9a, 0x25, 0x68, 0xf9, 0x80, 0x41, 0xba, 0x07, 0x28, 0xdd, 0x0d, 0x69,
                               0x81, 0xe9, 0x7e, 0x7a, 0xec, 0x1d, 0x43, 0x60, 0xc2, 0x0a, 0x27, 0xaf, 0xcc, 0xfd, 0x9f,
                               0xae, 0x0b, 0xf9, 0x1b, 0x65, 0xc5, 0x52, 0x47, 0x33, 0xab, 0x8f, 0x59, 0x3d, 0xab, 0xcd,
                               0x62, 0xb3, 0x57, 0x16, 0x39, 0xd6, 0x24, 0xe6, 0x51, 0x52, 0xab, 0x8f, 0x53, 0x0c, 0x35,
                               0x9f, 0x08, 0x61, 0xd8, 0x07, 0xca, 0x0d, 0xbf, 0x50, 0x0d, 0x6a, 0x61, 0x56, 0xa3, 0x8e,
                               0x08, 0x8a, 0x22, 0xb6, 0x5e, 0x52, 0xbc, 0x51, 0x4d, 0x16, 0xcc, 0xf8, 0x06, 0x81, 0x8c,
                               0xe9, 0x1a, 0xb7, 0x79, 0x37, 0x36, 0x5a, 0xf9, 0x0b, 0xbf, 0x74, 0xa3, 0x5b, 0xe6, 0xb4,
                               0x0b, 0x8e, 0xed, 0xf2, 0x78, 0x5e, 0x42, 0x87, 0x4d};

    ASSERT_TRUE(memcmp(ciphertext, encrypted, sizeof(ciphertext)) == 0);
}

} // namespace chacha20
// clang-format on
